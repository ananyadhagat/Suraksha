package com.example.suraksha;

import android.app.Dialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.Bundle;
import android.text.*;
import android.view.View;
import android.view.Gravity;
import android.widget.*;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.biometric.BiometricPrompt;
import androidx.core.content.ContextCompat;

import com.android.volley.Request;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;

import org.json.JSONObject;

import java.util.Calendar;
import java.util.concurrent.Executor;

public class Login extends AppCompatActivity {

    LinearLayout passcodeLayout;
    EditText[] passcodeBoxes;
    Button btnLogin;
    TextView greetingText, tvForgot;

    final int BOX_COUNT = 6;
    String mobile;
    String userUrl = "http://192.168.1.4:5000/api/user";
    int resetAttempts = 0;
    final int MAX_RESETS = 3;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);

        passcodeLayout = findViewById(R.id.passcodeBoxLayout);
        btnLogin = findViewById(R.id.btnLogin);
        greetingText = findViewById(R.id.greetingText);
        tvForgot = findViewById(R.id.tvForgotPasscode);

        SharedPreferences prefs = getSharedPreferences("SurakshaPrefs", MODE_PRIVATE);
        mobile = prefs.getString("mobile", null);

        if (mobile == null) {
            startActivity(new Intent(Login.this, SignUp.class));
            finish();
            return;
        }

        fetchUserNameAndShowGreeting(mobile);
        createBoxes(passcodeLayout, BOX_COUNT);

        btnLogin.setOnClickListener(v -> {
            String enteredPasscode = getBoxValue(passcodeBoxes);
            if (enteredPasscode.length() == BOX_COUNT) {
                verifyPasscode(mobile, enteredPasscode);
            } else {
                Toast.makeText(this, "Enter 6-digit passcode", Toast.LENGTH_SHORT).show();
            }
        });

        tvForgot.setOnClickListener(v -> {
            if (resetAttempts >= MAX_RESETS) {
                Toast.makeText(this, "You have reached max reset attempts today.", Toast.LENGTH_LONG).show();
            } else {
                showForgotPasscodeDialog();
            }
        });

        biometricLogin();
    }

    private void biometricLogin() {
        Executor executor = ContextCompat.getMainExecutor(this);
        BiometricPrompt biometricPrompt = new BiometricPrompt(this, executor, new BiometricPrompt.AuthenticationCallback() {
            @Override
            public void onAuthenticationSucceeded(@NonNull BiometricPrompt.AuthenticationResult result) {
                runOnUiThread(() -> {
                    Toast.makeText(Login.this, "Biometric authentication successful", Toast.LENGTH_SHORT).show();
                    goToHome();
                });
            }

            @Override
            public void onAuthenticationFailed() {
                runOnUiThread(() -> Toast.makeText(Login.this, "Biometric authentication failed", Toast.LENGTH_SHORT).show());
            }
        });

        BiometricPrompt.PromptInfo promptInfo = new BiometricPrompt.PromptInfo.Builder()
                .setTitle("Login with Biometric")
                .setSubtitle("Use fingerprint or face to login")
                .setNegativeButtonText("Use Passcode")
                .build();

        biometricPrompt.authenticate(promptInfo);
    }

    private void fetchUserNameAndShowGreeting(String mobile) {
        try {
            JSONObject params = new JSONObject().put("mobile", mobile);
            JsonObjectRequest request = new JsonObjectRequest(
                    Request.Method.POST,
                    userUrl + "/getName",
                    params,
                    response -> {
                        String name = response.optString("name", "User");
                        if (name.equals("") || name.equals("null")) name = "User";
                        greetingText.setText(getGreeting() + ", " + name);
                    },
                    error -> greetingText.setText(getGreeting() + ", User")
            );
            Volley.newRequestQueue(this).add(request);
        } catch (Exception e) {
            e.printStackTrace();
            greetingText.setText(getGreeting() + ", User");
        }
    }

    private String getGreeting() {
        int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
        if (hour < 12) return "Good Morning";
        else if (hour < 17) return "Good Afternoon";
        else return "Good Evening";
    }

    private void verifyPasscode(String mobile, String passcode) {
        try {
            JSONObject params = new JSONObject().put("mobile", mobile).put("passcode", passcode);
            JsonObjectRequest request = new JsonObjectRequest(
                    Request.Method.POST,
                    userUrl + "/login",
                    params,
                    response -> {
                        Toast.makeText(this, "Login successful!", Toast.LENGTH_SHORT).show();
                        goToHome();
                    },
                    error -> Toast.makeText(this, "Invalid passcode", Toast.LENGTH_SHORT).show()
            );
            Volley.newRequestQueue(this).add(request);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void goToHome() {
        startActivity(new Intent(Login.this, Homescreen.class));
        finish();
    }

    private void createBoxes(LinearLayout layout, int count) {
        layout.removeAllViews();
        passcodeBoxes = new EditText[count];

        for (int i = 0; i < count; i++) {
            EditText box = new EditText(this);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(100, 130);
            params.setMargins(8, 0, 8, 0);
            box.setLayoutParams(params);
            box.setBackgroundResource(R.drawable.box_background);
            box.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_VARIATION_PASSWORD);
            box.setTextColor(Color.BLACK);
            box.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);
            box.setTextSize(18);
            box.setId(View.generateViewId());

            int finalI = i;
            box.addTextChangedListener(new TextWatcher() {
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
                public void onTextChanged(CharSequence s, int start, int before, int count) {}
                public void afterTextChanged(Editable s) {
                    if (s.length() == 1 && finalI < count - 1)
                        passcodeBoxes[finalI + 1].requestFocus();
                }
            });

            layout.addView(box);
            passcodeBoxes[i] = box;
        }
        passcodeBoxes[0].requestFocus();
    }

    private String getBoxValue(EditText[] boxes) {
        StringBuilder sb = new StringBuilder();
        for (EditText box : boxes) sb.append(box.getText().toString().trim());
        return sb.toString();
    }

    private EditText[] createInlineBoxes(Dialog dialog, int containerId) {
        LinearLayout layout = dialog.findViewById(containerId);
        layout.removeAllViews();
        layout.setOrientation(LinearLayout.HORIZONTAL);
        layout.setGravity(Gravity.CENTER);

        EditText[] boxes = new EditText[6];

        for (int i = 0; i < 6; i++) {
            EditText b = new EditText(this);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(100, 140);
            params.setMargins(8, 8, 8, 8);
            b.setLayoutParams(params);
            b.setInputType(InputType.TYPE_CLASS_NUMBER);
            b.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);
            b.setGravity(Gravity.CENTER);
            b.setBackgroundResource(R.drawable.box_background);
            b.setTextSize(18);
            b.setTextColor(Color.BLACK);

            final int index = i;
            b.addTextChangedListener(new TextWatcher() {
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
                public void onTextChanged(CharSequence s, int start, int before, int count) {}
                public void afterTextChanged(Editable s) {
                    if (s.length() == 1 && index < 5) {
                        boxes[index + 1].requestFocus();
                    }
                }
            });

            layout.addView(b);
            boxes[i] = b;
        }

        boxes[0].requestFocus();
        return boxes;
    }
    private void sendOtpForReset(String mobile) {
        try {
            JSONObject params = new JSONObject().put("mobile", mobile);
            JsonObjectRequest request = new JsonObjectRequest(
                    Request.Method.POST,
                    "http://192.168.1.4:5000/api/otp/send",
                    params,
                    resp -> Toast.makeText(this, "OTP sent", Toast.LENGTH_SHORT).show(),
                    err -> Toast.makeText(this, "Failed sending OTP", Toast.LENGTH_SHORT).show()
            );
            Volley.newRequestQueue(this).add(request);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void showForgotPasscodeDialog() {
        Dialog dialog = new Dialog(this);
        dialog.setContentView(R.layout.dialog_forgot_passcode);
        dialog.setCancelable(false);

        LinearLayout step1Layout = dialog.findViewById(R.id.step1Layout);
        LinearLayout step2Layout = dialog.findViewById(R.id.step2Layout);

        Button btnProceed = dialog.findViewById(R.id.btnProceed);
        Button btnVerifyOtp = dialog.findViewById(R.id.btnVerifyOtp);
        Button btnCancel = dialog.findViewById(R.id.btnCancel);
        btnCancel.setOnClickListener(v -> dialog.dismiss());

        EditText[] otpBoxes = createInlineBoxes(dialog, R.id.otpLayout);

        step1Layout.setVisibility(View.VISIBLE);
        step2Layout.setVisibility(View.GONE);

        btnProceed.setOnClickListener(v -> {
            // Hide Step 1, show Step 2
            step1Layout.setVisibility(View.GONE);
            step2Layout.setVisibility(View.VISIBLE);

            sendOtpForReset(mobile);
        });

        btnVerifyOtp.setOnClickListener(v -> {
            String otp = getBoxValue(otpBoxes);
            if (otp.length() != 6) {
                Toast.makeText(this, "Enter 6-digit OTP", Toast.LENGTH_SHORT).show();
                return;
            }
            verifyOtpAndOpenPasscodeDialog(otp, dialog);
        });

        dialog.show();
    }

    // New method to verify OTP and open passcode reset dialog separately
    private void verifyOtpAndOpenPasscodeDialog(String otp, Dialog parentDialog) {
        try {
            JSONObject p = new JSONObject().put("mobile", mobile).put("otp", otp);
            JsonObjectRequest request = new JsonObjectRequest(
                    Request.Method.POST,
                    "http://192.168.1.4:5000/api/otp/verify",
                    p,
                    resp -> {
                        Toast.makeText(this, "OTP Verified", Toast.LENGTH_SHORT).show();
                        parentDialog.dismiss();
                        showPasscodeResetDialog();
                    },
                    err -> {
                        resetAttempts++;
                        Toast.makeText(this, "Invalid OTP", Toast.LENGTH_SHORT).show();
                    }
            );
            Volley.newRequestQueue(this).add(request);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void updatePasscodeOnServer(String newPass, Dialog dialog) {
        try {
            JSONObject params = new JSONObject()
                    .put("mobile", mobile)
                    .put("passcode", newPass);

            JsonObjectRequest request = new JsonObjectRequest(
                    Request.Method.POST,
                    userUrl + "/register",
                    params,
                    response -> {
                        Toast.makeText(this, "Passcode reset! Please login.", Toast.LENGTH_LONG).show();
                        dialog.dismiss();
                    },
                    error -> Toast.makeText(this, "Failed to update passcode", Toast.LENGTH_SHORT).show()
            );

            Volley.newRequestQueue(this).add(request);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // New dialog for passcode reset
    private void showPasscodeResetDialog() {
        Dialog dialog = new Dialog(this);
        dialog.setContentView(R.layout.dialog_reset_passcode);
        dialog.setCancelable(false);

        LinearLayout newPasscodeLayout = dialog.findViewById(R.id.newPasscodeLayout);
        LinearLayout confirmPasscodeLayout = dialog.findViewById(R.id.confirmPasscodeLayout);
        Button btnResetPasscode = dialog.findViewById(R.id.btnResetPasscode);

        EditText[] newPasscodeBoxes = createInlineBoxes(dialog, R.id.newPasscodeLayout);
        EditText[] confirmPasscodeBoxes = createInlineBoxes(dialog, R.id.confirmPasscodeLayout);

        btnResetPasscode.setOnClickListener(v -> {
            String p1 = getBoxValue(newPasscodeBoxes);
            String p2 = getBoxValue(confirmPasscodeBoxes);

            if (p1.length() != 6 || p2.length() != 6) {
                Toast.makeText(this, "Passcodes must be 6 digits", Toast.LENGTH_SHORT).show();
                return;
            }

            if (!p1.equals(p2)) {
                Toast.makeText(this, "Passcodes do not match", Toast.LENGTH_SHORT).show();
                return;
            }

            updatePasscodeOnServer(p1, dialog);
        });

        dialog.show();
    }

}

Homescreen.java : 
package com.example.suraksha;

import android.app.AlertDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.Bundle;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.*;

import androidx.appcompat.app.AppCompatActivity;
import androidx.drawerlayout.widget.DrawerLayout;

import com.android.volley.Request;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;

import org.json.JSONObject;

public class Homescreen extends AppCompatActivity {

    GridLayout payGrid, upiGrid, privacyGrid;
    DrawerLayout drawerLayout;
    TextView userInitials, fullName, phoneNumber;
    String userUrl = "http://192.168.1.4:5000/api/user";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_homescreen);

        payGrid = findViewById(R.id.payGrid);
        upiGrid = findViewById(R.id.upiGrid);
        privacyGrid = findViewById(R.id.privacyGrid);
        drawerLayout = findViewById(R.id.drawerLayout);

        userInitials = findViewById(R.id.userInitials);
        fullName = findViewById(R.id.fullName);
        phoneNumber = findViewById(R.id.phoneNumber);

        fetchUserDataFromDatabase();

        ImageView profileIcon = findViewById(R.id.profileIcon);
        profileIcon.setOnClickListener(v -> drawerLayout.openDrawer(Gravity.LEFT));

        ImageView logoutIcon = findViewById(R.id.logoutIcon);
        logoutIcon.setOnClickListener(v -> showLogoutDialog());

        addIconToGrid(payGrid, R.drawable.ic_send, "Send Money");
        addIconToGrid(payGrid, R.drawable.ic_bill, "Bill Payment");
        addIconToGrid(payGrid, R.drawable.ic_card, "Card-less Pay");
        addIconToGrid(payGrid, R.drawable.ic_beneficiary, "My Beneficiary");
        addIconToGrid(payGrid, R.drawable.ic_passbook, "ePassbook");
        addIconToGrid(payGrid, R.drawable.ic_balance, "Account Balance");

        addIconToGrid(upiGrid, R.drawable.upi, "Send to UPI ID");
        addIconToGrid(upiGrid, R.drawable.ic_qr, "Scan QR");
        addIconToGrid(upiGrid, R.drawable.ic_contact, "Pay to Mobile Number");
        addIconToGrid(upiGrid, R.drawable.ic_tap, "Tap & Pay");
        addIconToGrid(upiGrid, R.drawable.ic_receive, "Receive Money");
        addIconToGrid(upiGrid, R.drawable.ic_download, "Download UPI Statement");

        addIconToGrid(privacyGrid, R.drawable.ic_track, "Track Your Behaviour");
        addIconToGrid(privacyGrid, R.drawable.ic_custom, "Customize Risk Behaviour");
        addIconToGrid(privacyGrid, R.drawable.ic_passcode, "Change Passcode");
        addIconToGrid(privacyGrid, R.drawable.ic_tpin, "Set TPIN");
        addIconToGrid(privacyGrid, R.drawable.ic_location, "Enable Location");
        addIconToGrid(privacyGrid, R.drawable.ic_help, "Help & Support");
    }

    private void fetchUserDataFromDatabase() {
        SharedPreferences prefs = getSharedPreferences("SurakshaPrefs", MODE_PRIVATE);
        String mobile = prefs.getString("mobile", null);
        if (mobile == null) return;

        try {
            JSONObject params = new JSONObject().put("mobile", mobile);

            JsonObjectRequest request = new JsonObjectRequest(
                    Request.Method.POST,
                    userUrl + "/getName",
                    params,
                    response -> {
                        String name = response.optString("name", "User");
                        if (name.equals("") || name.equals("null")) name = "User";

                        fullName.setText(name);
                        phoneNumber.setText(mobile);
                        userInitials.setText(getInitials(name));
                    },
                    error -> {
                        fullName.setText("User");
                        phoneNumber.setText(mobile);
                        userInitials.setText("U");
                    }
            );

            Volley.newRequestQueue(this).add(request);

        } catch (Exception e) {
            e.printStackTrace();
            fullName.setText("User");
            phoneNumber.setText(mobile);
            userInitials.setText("U");
        }
    }

    private String getInitials(String name) {
        String[] parts = name.trim().split("\\s+");
        StringBuilder initials = new StringBuilder();
        for (String part : parts) {
            if (!part.isEmpty()) {
                initials.append(part.toUpperCase().charAt(0));
            }
        }
        return initials.toString();
    }
    private void addIconToGrid(GridLayout grid, int iconRes, String label) {
        LinearLayout itemLayout = new LinearLayout(this);
        itemLayout.setOrientation(LinearLayout.VERTICAL);
        itemLayout.setGravity(Gravity.CENTER_HORIZONTAL);
        itemLayout.setPadding(8, 16, 8, 16);

        ImageView iconView = new ImageView(this);
        iconView.setImageResource(iconRes);
        LinearLayout.LayoutParams iconParams = new LinearLayout.LayoutParams(80, 80);
        iconView.setLayoutParams(iconParams);

        TextView textView = new TextView(this);
        textView.setText(label);
        textView.setTextColor(Color.BLACK);
        textView.setTextSize(14);
        textView.setGravity(Gravity.CENTER);
        textView.setPadding(0, 8, 0, 0);
        textView.setMaxLines(2);

        itemLayout.addView(iconView);
        itemLayout.addView(textView);

        GridLayout.LayoutParams params = new GridLayout.LayoutParams();
        params.setMargins(12, 12, 12, 12);
        params.width = 0;
        params.columnSpec = GridLayout.spec(GridLayout.UNDEFINED, 1f);
        itemLayout.setLayoutParams(params);

        // ✅ Set click action here
        itemLayout.setOnClickListener(v -> {
            if (label.equals("Track Your Behaviour")) {
                startActivity(new Intent(Homescreen.this, TrackBehaviorActivity.class));
            }
                if (label.equals("Customize Risk Behaviour")) {
                    startActivity(new Intent(Homescreen.this, Customize.class));
                }
            if (label.equals("Change Passcode")) {
                startActivity(new Intent(Homescreen.this, ChangePasscode.class));
            }
            if (label.equals("Send Money")) {
                startActivity(new Intent(Homescreen.this, SendMoney.class));
            }
            if (label.equals("Set TPIN")) {
                startActivity(new Intent(Homescreen.this, TPINActivity.class));
            }
            // Add more if-conditions here for other privacy features like:
            // "Opt-out from Tracking", "Change Passcode", etc.
        });

        grid.addView(itemLayout);
    }


    private void showLogoutDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this, R.style.CustomDialog);
        LayoutInflater inflater = LayoutInflater.from(this);
        View dialogView = inflater.inflate(R.layout.dialog_logout_confirm, null);
        builder.setView(dialogView);

        Button btnYes = dialogView.findViewById(R.id.btnYes);
        Button btnNo = dialogView.findViewById(R.id.btnNo);

        AlertDialog dialog = builder.create();
        dialog.setCancelable(false);

        btnNo.setOnClickListener(v -> dialog.dismiss());

        btnYes.setOnClickListener(v -> {
            SharedPreferences prefs = getSharedPreferences("SurakshaPrefs", MODE_PRIVATE);
            prefs.edit().clear().apply();
            dialog.dismiss();
            finishAffinity();
        });

        dialog.show();
    }
}
 send money : 
 package com.example.suraksha;

import android.app.AlertDialog;
import android.content.SharedPreferences;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.*;

import androidx.appcompat.app.AppCompatActivity;

import com.android.volley.Request;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;

import org.json.JSONObject;

public class SendMoney extends AppCompatActivity {

    private EditText editTextAC, editTextIFSC, editTextRecipient, editTextAmount, editTextMessage, editTextPIN;
    private Button btnSend;
    private String mobile;
    private final String tpinVerifyUrl = "http://192.168.1.4:5000/api/user/verify-tpin";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.send_money);

        SharedPreferences prefs = getSharedPreferences("SurakshaPrefs", MODE_PRIVATE);
        mobile = prefs.getString("mobile", null);

        editTextAC = findViewById(R.id.editTextAC);
        editTextRecipient = findViewById(R.id.editTextRecipient);
        editTextIFSC = findViewById(R.id.editTextIFSC);
        editTextAmount = findViewById(R.id.editTextAmount);
        editTextMessage = findViewById(R.id.editTextMessage);
        editTextPIN = findViewById(R.id.editTextPIN);
        btnSend = findViewById(R.id.btnSendMoney);

        btnSend.setOnClickListener(v -> {
            String accnumber = editTextAC.getText().toString().trim();
            String recipient = editTextRecipient.getText().toString().trim();
            String ifsc = editTextIFSC.getText().toString().trim();
            String amount = editTextAmount.getText().toString().trim();
            String message = editTextMessage.getText().toString().trim();
            String tpin = editTextPIN.getText().toString().trim();

            if (TextUtils.isEmpty(recipient) || TextUtils.isEmpty(amount) || TextUtils.isEmpty(tpin)) {
                Toast.makeText(this, "All fields including TPIN are required", Toast.LENGTH_SHORT).show();
                return;
            }

            verifyTPIN(tpin, amount, recipient);
        });
    }

    private void verifyTPIN(String tpin, String amount, String recipient) {
        try {
            JSONObject params = new JSONObject();
            params.put("mobile", mobile);
            params.put("tpin", tpin);

            JsonObjectRequest request = new JsonObjectRequest(
                    Request.Method.POST,
                    tpinVerifyUrl,
                    params,
                    response -> showSuccessDialog(amount, recipient),
                    error -> showFailureDialog()
            );

            Volley.newRequestQueue(this).add(request);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void showSuccessDialog(String amount, String recipient) {
        View view = LayoutInflater.from(this).inflate(R.layout.dialog_transaction_status, null);
        ImageView icon = view.findViewById(R.id.statusIcon);
        TextView statusText = view.findViewById(R.id.statusText);
        TextView desc = view.findViewById(R.id.statusDescription);

        icon.setImageResource(R.drawable.ic_tick_green);
        statusText.setText("Transaction Successful");
        statusText.setTextColor(getResources().getColor(android.R.color.holo_green_dark));
        desc.setText("₹" + amount + " sent to " + recipient);

        new AlertDialog.Builder(this)
                .setView(view)
                .setCancelable(true)
                .show();

        clearFields();
    }

    private void showFailureDialog() {
        View view = LayoutInflater.from(this).inflate(R.layout.dialog_transaction_status, null);
        ImageView icon = view.findViewById(R.id.statusIcon);
        TextView statusText = view.findViewById(R.id.statusText);
        TextView desc = view.findViewById(R.id.statusDescription);

        icon.setImageResource(R.drawable.ic_cross_red);
        statusText.setText("Transaction Failed");
        statusText.setTextColor(getResources().getColor(android.R.color.holo_red_dark));
        desc.setText("Incorrect TPIN. Please try again.");

        new AlertDialog.Builder(this)
                .setView(view)
                .setCancelable(true)
                .show();
    }

    private void clearFields() {
        editTextAC.setText("");
        editTextRecipient.setText("");
        editTextIFSC.setText("");
        editTextAmount.setText("");
        editTextMessage.setText("");
        editTextPIN.setText("");
    }

    public void onBackClick(View view) {
        onBackPressed();
    }
}
